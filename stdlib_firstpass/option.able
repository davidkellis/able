package able

union Option T = Some {value: T} | None

fn Option(value: Nilable T) -> Option T {
  if value {
    Some(value)
  } else {
    None
  }
}

impl Option T {
  fn defined?(o: Option T) -> bool => o match { None => false | _ => true }

  fn value(o: Self) -> T => o match {
    Some{v} => v
    None => raise Error("option undefined")
  }

  fn get_or_else(o: Self, default: T) -> T => o match {
    Some{v} => v
    None => default
  }
}


impl Mappable for Option {
  fn map(self: Self A, convert: A -> B) -> Self B {
    self match {
      Some { a } => Some { convert(a) }
      None => None
    }
  }
}




# as an alternative implemention for Option T:

# In retrospect, this will not work, because it doesn't allow you to represent Option (Option T).
# If Option T is an alias for `T | None`, then `Option (Option T)` === `Option T | None` === `T | None | None` === `T | None`.
# So, defining it as an alias for `T | None` doesn't let you distinguish between whether the outer option is none, 
# or the inner option is none.
# So, you *have* to have the Some "wrapper", so that Option (Option T) is translated as 
# Some( Option T ) | None === Some (Some T | None) | None, which will allow you to have a `Some None`, 
# which would denote the presence of a value for the outer option, but the absence of a value for the inner option.

# union Option T = T | None
# 
# fn defined?(o: Option T) -> bool => o match { None => false | _ => true }
# 
# fn value(o: Option T) -> T => o match {
#   t: T => t
#   None => raise Error("unable to extract value from undefined option")
# }
# 
# impl Mappable for Option {
#   fn map(self: Self A, convert: A -> B) -> Self B {
#     self match {
#       a: A => convert(a)
#       None => None
#     }
#   }
# }




# Since Nilable is defined as a simple alias for `T | Nil`, it suffers from the same problem noted above, but that's ok for
# nil-valued things, hence the decision to include Nilable as a distinct thing from Option.

union Nilable T = T | Nil

fn defined?(nilable: Nilable T) -> bool => nilable match { Nil => false | _ => true }

fn value(nilable: Nilable T) -> T => nilable match { t: T => t | Nil => raise "boom" }

impl Mappable for Nilable {
  fn map(self: Self A, convert: A -> B) -> Self B {
    self match {
      a: A => convert(a)
      None => None
    }
  }
}
