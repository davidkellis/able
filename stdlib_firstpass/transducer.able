interface Reducer Acc In for T {
  fn init() -> Acc
  fn step(Acc, In) -> Acc
  fn complete(Acc) -> Acc
}

# see http://elbenshira.com/blog/understanding-transducers/
# https://medium.com/@roman01la/understanding-transducers-in-javascript-3500d3bd9624
# http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming
# https://github.com/cognitect-labs/transducers-js#transformer-protocol
# https://github.com/cognitect-labs/transducers-js/blob/master/src/com/cognitect/transducers.js

type ReducingFn Acc Item = (Acc, Item) -> Acc
type TransducerFn Acc A B = ReducingFn Acc A -> ReducingFn Acc B

fn mapping(f: A -> B) -> Transducer Acc A B {
  fn(reducing: ReducingFn Acc B) -> ReducingFn Acc A {
    fn(acc: Acc, item: A) -> Acc {
      reducing(acc, f(item))
    }
  }
}

fn filtering(pred: A -> bool) -> Transducer Acc A A {
  fn(reducing: ReducingFn Acc A) -> ReducingFn Acc A {
    fn(acc: Acc, item: A) -> Acc {
      if pred(item)
        reducing(acc, item)
      else
        acc
    }
  }
}

fn all?(pred: A -> bool) -> Transducer Acc A bool {
  fn(reducing: ReducingFn Acc bool) -> ReducingFn Acc A {
    fn(acc: Acc, item: A) -> Acc {
      if pred(item)
        reducing(acc, true)
      else
        acc
    }
  }
}

fn build_transducer[Acc, A, B](visit: B -> Unit) -> Transducer Acc A B {
  fn(reducing: ReducingFn Acc B) -> ReducingFn Acc A {
    fn(acc: Acc, item: A) -> Acc {
      emit = fn(item: B) {

      }
      reducing(acc, f(item))
    }
  }
}


# fn transduce(transducer: TransducerFn Acc A B, reducer: ReducingFn Acc B, init: Acc, seq: Iterable A) -> Acc {
#   seq.reduce(init, transducer(reducer))
# }

# Example:
# Array(1,2,3).reduce(0, mapping(x -> x + 1), +)
# => 9
# Array(1,2,3).reduce(Array(), mapping(x -> x + 1), append)
# => Array(2,3,4)
fn reduce(seq: Iterable A, init: Acc, transducer: TransducerFn Acc A B, reducer: ReducingFn Acc B) -> Acc {
  seq.reduce(init, transducer(reducer))
}

# Array(1,2,3).transform.map(x => "${x + 1}").reverse.join(",").eval
# => "4,3,2"



build(collection: Source, transform: Transducer, builder: Builder) {
  collection.reduce(builder.empty(), transform(builder.append))
}



















fn reduce(reducer: (Acc, I) -> Acc, init: Acc, collection: Seq I) -> Acc {
  acc = init
  for i in collection {
    acc = reducer(acc, i)
  }
  acc
}


###################################### simplified transducers #############################

interface Builder Acc T {
  fn empty() -> Acc           # returns an empty accumulator value
  fn append(Acc, T) -> Acc    # adds an item to an accumulator value, returning a new accumulator value
}
type Transform A B = Visitor B -> Visitor A
type Visitor A = A -> Unit

struct Accumulator Acc T {
  fn append(Acc, T) -> Acc
}

fn build(collection: Iterable A, transform: Transform A B, builder: Builder B) -> B {
  result = builder.empty()
  appender = fn(item: B) -> Unit {
    result = builder.append(result, item)    # appender has type B -> Unit === Visitor B, and mutates result
  }
  wrapper_appender = transform(appender)  # wrapper_appender has type A -> Unit === Visitor A
  collection.each { item => wrapper_appender(item) }
  result
}

fn compose(f: B -> C, g: A -> B) -> A -> C => f(g(_))

compose(
  mapping(_ + 1),
  filtering(_ > 1)
)
=> mapping(_ + 1)(filtering(_ > 1)(_))

fn mapping(f: A -> B) -> Transform A B {
  fn(visit: Visitor B) -> Visitor A {
    (item: A) => visit(f(item))
  }
}

fn filtering(pred: A -> bool) -> Transform A A {
  fn(visit: Visitor A) -> Visitor A {
    (item: A) => visit(item) if pred(item)
  }
}

fn all?(pred: A -> bool) -> Transform A bool {
  fn(visit: Visitor A) -> Visitor A {

    (item: A) => visit(item) if pred(item)
  }
}


###################################### simplified transducers #2 #############################

struct Visitor A {
  visit: A -> Unit
  complete: () -> Unit
}

fn wrap[B](visitor: Visitor A, transform_visit: (A -> Unit) -> (B -> Unit)) -> Visitor B {
  Visitor {
    transform_visit(visitor.visit),
    visitor.complete
  }
}

# mapping is not stateful
# fn mapping(f: A -> B, visitor: Visitor B) -> Visitor A {
#   (item: A) => visit(f(item))
# }
# fn map(f: A -> B, visit: Visitor B) -> Visitor A => visit(f(_))
fn map(f: A -> B, visitor: Visitor B) -> Visitor A {
  visitor.wrap { visit: (B -> Unit) => visit(f(_)) }
}

# filter is not stateful
# fn filter(pred: A -> bool, visit: Visitor A) -> Visitor A {
#   (item: A) => visit(item) if pred(item)
# }
fn filter(pred: A -> bool, visitor: Visitor A) -> Visitor A {
  visitor.wrap { visit => visit(_1) if pred(_1) }
}
fn select = filter

# drop is stateful
fn drop(n: Int, visit: Visitor A) -> Visitor A {
  i = 1
  (item: A) => {
    if i <= n {
      i += 1
    } else {
      visit(item)
    }
  }
}

# drop_while is stateful
fn drop_while(pred: A -> bool, visit: Visitor A) -> Visitor A {
  continue_ignoring_values = true
  (item: A) => {
    continue_ignoring_values &&= pred(item)
    visit(item) if !continue_ignoring_values
  }
}

# take is stateful
fn take(n: Int, visit: Visitor A) -> Visitor A {
  i = 1
  (item: A) => {
    if i <= n {
      i += 1
      visit(item)
    }
  }
}

# first is stateful
fn first(visit: Visitor A) -> Visitor A => take(1)

# compact is not stateful
fn compact(visit: Visitor A) -> Visitor A => filter(truthy?)   # select only the truthy values; drop the falsy values

# cat is not stateful
fn cat[C: Iterable](visit: Visitor A) -> Visitor C.A {
  (item: C A) => item.each(visit)
}

fn slice(n: Int, visitor: Visitor A) -> Visitor Array.A {
  slice = ArrayBuilder[A](n)
  Visitor {
    visit = (item: A) => {
      if slice.length < n {
        slice.append(item)
      } else {
        visit(slice.build)
        slice.clear
      }
    },
    complete = fn(){
      visit(slice.build)
      visitor.complete()
    }
  }
}



interface Builder Acc T {     # Builder is a Monoid when Acc and T are the same types
  fn empty() -> Acc           # returns an empty accumulator value
  fn append(Acc, T) -> Acc    # adds an item to an accumulator value, returning a new accumulator value
}
type Visitor A = A -> Unit

struct Accumulator Acc {
  value: Acc
}


fn build(collection: Iterable A, transform: Visitor A, builder: Builder Acc B) -> Acc {
  acc = Accumulator(builder.empty)

  # appender has type B -> Unit === Visitor B,
  appender = fn(item: B) -> Unit {
    acc.value = builder.append(acc.value, item)
  }

  wrapper_appender = transform(appender)  # wrapper_appender has type A -> Unit === Visitor A
  collection.each { item => wrapper_appender(item) }
  acc.value
}
