I'm taking the view that interfaces are just a set of functions defined for a given set of concrete types,
where a concrete type is defined as either a type with no type parameters,
or a type constructor that has all its type parameters "filled in" with either other concrete types,
or a type variable representing a concrete types.

1. multi-parameter type classes should be the general language feature
2. single parameter type classes should be merely a specialization of (1), with some syntactic sugar

interface Enumerable E.T {
  fn each(E T, T -> Unit) -> Unit
  fn iterator(enum: E T) -> Iterator T
}

interface Iterator I.T {
  fn has_next?(I T) -> Bool
  fn next(I T) -> Option T
}

interface Mappable M.A {
  fn map(m: M A, convert: A -> B) -> M B
}

interface Buildable B A {
  fn empty() -> B
  fn add(B, A) -> B
  fn concat(B, Enumerable A) -> B
}



impl Enumerable Array.T {
  fn each(array: Array T, f: T -> Unit) -> Unit { ... }
}

-------------------------------------------

I'm taking the view that interfaces are just a set of functions defined for a given set of concrete types,
where a concrete type is defined as either a type with no type parameters,
or a type constructor that has all its type parameters "filled in" with either other concrete types,
or a type variable representing a concrete types.

interface Enumerable T for E T {
  fn each(E T, T -> Unit) -> Unit
  fn iterator(enum: E T) -> Iterator T
}

interface Iterator T for I T {
  fn has_next?(I T) -> Bool
  fn next(I T) -> Option T
}

interface Mappable A for M A {
  fn map(m: M A, convert: A -> B) -> M B
}


In general, interfaces are defined as:
interface A [B C D ...] for M [N O P ...], W [X Y Z ...], ... { ... }
where M and W are type constructors parameterized on N O P and X Y Z respectively.
The list of types in the for clause are concrete types.

If the list of concrete implementing types in the for clause has one element,
then the interface is a single-type interface (with an implied self type),
otherwise the interface is a multi-type interface which has no implied self type.
A single concrete type can implement a single-type interface, but a multi-type interface can only be implemented
by a set of concrete types.

Multi-type interfaces, which have no implied self type, are defined with this syntax:
interface Foo A B C for M N O, P Q R { ... }

Single-type interfaces, which have an implied self type, are defined with this syntax:
interface Foo A B C for M N O { ... }

When calling a function defined in an interface, a client may supply a value of the interface type to the function in any
argument that is typed as the interface's self type.
For example, given:
interface Enumerable T for E T {
  fn each(E T, T -> Unit) -> Unit
}
a client may call the each function by supplying a value of type `Enumerable T` as the first argument to each, like this:
e: Enumerable Int = 1..10
each(e, printLn)

If a type implements a single-type interface, then a value of that type may be supplied as a value of that interface.
For example, given:
interface Enumerable T for E T {
  fn each(E T, T -> Unit) -> Unit
}
impl Enumerable T for Array T {
  fn each(Array T, T -> Unit) -> Unit { ... }
}
fn printAll(e: Enumerable T) -> Unit {
  e.each(puts)
}


