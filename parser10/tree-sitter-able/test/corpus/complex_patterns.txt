================
Complex Patterns
================

fn match_patterns(value) {
  value match {
    case Point { x: x_val: i32, y } if x_val > 0 => x_val,
    case Wrapper { item: Point { x, y: y_val: i64 } } => y_val,
    case [head: i32, ...rest] => head
  }
}
---

(source_file
  (function_definition
    (identifier)
    (parameter_list
      (parameter
        (pattern_base
          (identifier))))
    (block
      (expression_statement
        (pipe_expression
          (matchable_expression
            (match_expression
              (assignment_expression
                (range_expression
                  (logical_or_expression
                    (logical_and_expression
                      (bitwise_or_expression
                        (bitwise_xor_expression
                          (bitwise_and_expression
                            (equality_expression
                              (comparison_expression
                                (shift_expression
                                  (additive_expression
                                    (multiplicative_expression
                                      (unary_expression
                                        (exponent_expression
                                          (postfix_expression
                                            (primary_expression
                                              (identifier)))))))))))))))))
              (match_clause
                (pattern_base
                  (struct_pattern
                    (qualified_identifier
                      (identifier))
                    (struct_pattern_element
                      (struct_pattern_field
                        (identifier)
                        (typed_pattern
                          (pattern_base
                            (identifier))
                          (type_union
                            (type_arrow
                              (type_suffix
                                (type_prefix
                                  (type_atom
                                    (type_identifier
                                      (qualified_identifier
                                        (identifier)))))))))))
                    (struct_pattern_element
                      (struct_pattern_field
                        (identifier)))))
                (match_guard
                  (pipe_expression
                    (matchable_expression
                      (assignment_expression
                        (range_expression
                          (logical_or_expression
                            (logical_and_expression
                              (bitwise_or_expression
                                (bitwise_xor_expression
                                  (bitwise_and_expression
                                    (equality_expression
                                      (comparison_expression
                                        (shift_expression
                                          (additive_expression
                                            (multiplicative_expression
                                              (unary_expression
                                                (exponent_expression
                                                  (postfix_expression
                                                    (primary_expression
                                                      (identifier))))))))
                                        (shift_expression
                                          (additive_expression
                                            (multiplicative_expression
                                              (unary_expression
                                                (exponent_expression
                                                  (postfix_expression
                                                    (primary_expression
                                                      (number_literal))))))))))))))))))))
                (pipe_expression
                  (matchable_expression
                    (assignment_expression
                      (range_expression
                        (logical_or_expression
                          (logical_and_expression
                            (bitwise_or_expression
                              (bitwise_xor_expression
                                (bitwise_and_expression
                                  (equality_expression
                                    (comparison_expression
                                      (shift_expression
                                        (additive_expression
                                          (multiplicative_expression
                                            (unary_expression
                                              (exponent_expression
                                                (postfix_expression
                                                  (primary_expression
                                                    (identifier))))))))))))))))))))
              (match_clause
                (pattern_base
                  (struct_pattern
                    (qualified_identifier
                      (identifier))
                    (struct_pattern_element
                      (struct_pattern_field
                        (identifier)
                        (pattern_base
                          (struct_pattern
                            (qualified_identifier
                              (identifier))
                            (struct_pattern_element
                              (struct_pattern_field
                                (identifier)))
                            (struct_pattern_element
                              (struct_pattern_field
                                (identifier)
                                (typed_pattern
                                  (pattern_base
                                    (identifier))
                                  (type_union
                                    (type_arrow
                                      (type_suffix
                                        (type_prefix
                                          (type_atom
                                            (type_identifier
                                              (qualified_identifier
                                                (identifier)))))))))))))))))
                (pipe_expression
                  (matchable_expression
                    (assignment_expression
                      (range_expression
                        (logical_or_expression
                          (logical_and_expression
                            (bitwise_or_expression
                              (bitwise_xor_expression
                                (bitwise_and_expression
                                  (equality_expression
                                    (comparison_expression
                                      (shift_expression
                                        (additive_expression
                                          (multiplicative_expression
                                            (unary_expression
                                              (exponent_expression
                                                (postfix_expression
                                                  (primary_expression
                                                    (identifier))))))))))))))))))))
              (match_clause
                (pattern_base
                  (array_pattern
                    (typed_pattern
                      (pattern_base
                        (identifier))
                      (type_union
                        (type_arrow
                          (type_suffix
                            (type_prefix
                              (type_atom
                                (type_identifier
                                  (qualified_identifier
                                    (identifier)))))))))
                    (array_pattern_rest
                      (identifier))))
                (pipe_expression
                  (matchable_expression
                    (assignment_expression
                      (range_expression
                        (logical_or_expression
                          (logical_and_expression
                            (bitwise_or_expression
                              (bitwise_xor_expression
                                (bitwise_and_expression
                                  (equality_expression
                                    (comparison_expression
                                      (shift_expression
                                        (additive_expression
                                          (multiplicative_expression
                                            (unary_expression
                                              (exponent_expression
                                                (postfix_expression
                                                  (primary_expression
                                                    (identifier)))))))))))))))))))))))))))
