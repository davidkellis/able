==================
Top-Level Declarations
==================

package demo.core;

import std.io;
dynimport dyn.tools as toolset;

struct Point T {
  x: T,
  y: T,
}

union MaybeNumber = nil | i64

interface Display for T {
  fn to_string(self: Self) -> string;
}

Sum = impl Monoid for i32 {
  fn id() -> i32 { 0 }
}

impl Display for Point i32 {
  fn to_string(self: Self) -> string {
    "Point"
  }
}

methods Point i32 {
  fn magnitude(self: Self) -> i32 {
    self.x * self.x + self.y * self.y
  }
}

---

(source_file
  (package_statement
    (identifier)
    (identifier))
  (import_statement
    (qualified_identifier
      (identifier)
      (identifier)))
  (import_statement
    (qualified_identifier
      (identifier)
      (identifier))
    (import_clause
      (identifier)))
  (struct_definition
    (identifier)
    (declaration_type_parameters
      (generic_parameter_list
        (generic_parameter
          (identifier))))
    (struct_record
      (struct_field
        (identifier)
        (type_union
          (type_arrow
            (type_suffix
              (type_prefix
                (type_atom
                  (type_identifier
                    (qualified_identifier
                      (identifier)))))))))
      (struct_field
        (identifier)
        (type_union
          (type_arrow
            (type_suffix
              (type_prefix
                (type_atom
                  (type_identifier
                    (qualified_identifier
                      (identifier)))))))))))
  (union_definition
    (identifier)
    (type_union
      (type_arrow
        (type_suffix
          (type_prefix
            (type_atom
              (type_identifier)))))
      (type_arrow
        (type_suffix
          (type_prefix
            (type_atom
              (type_identifier
                (qualified_identifier
                  (identifier)))))))))
  (interface_definition
    (identifier)
    (type_union
      (type_arrow
        (type_suffix
          (type_prefix
            (type_atom
              (type_identifier
                (qualified_identifier
                  (identifier))))))))
    (interface_member
      (function_signature
        (identifier)
        (parameter_list
          (parameter
            (typed_pattern
              (pattern_base
                (identifier))
              (type_union
                (type_arrow
                  (type_suffix
                    (type_prefix
                      (type_atom
                        (type_identifier)))))))))
        (return_type
          (type_union
            (type_arrow
              (type_suffix
                (type_prefix
                  (type_atom
                    (type_identifier
                      (qualified_identifier
                        (identifier))))))))))))
  (named_implementation_definition
    (identifier)
    (implementation_definition
      (qualified_identifier
        (identifier))
      (type_union
        (type_arrow
          (type_suffix
            (type_prefix
              (type_atom
                (type_identifier
                  (qualified_identifier
                    (identifier))))))))
      (function_definition
        (identifier)
        (parameter_list)
        (return_type
          (type_union
            (type_arrow
              (type_suffix
                (type_prefix
                  (type_atom
                    (type_identifier
                      (qualified_identifier
                        (identifier)))))))))
        (block
          (expression_statement
            (pipe_expression
              (matchable_expression
                (assignment_expression
                  (range_expression
                    (logical_or_expression
                      (logical_and_expression
                        (bitwise_or_expression
                          (bitwise_xor_expression
                            (bitwise_and_expression
                              (equality_expression
                                (comparison_expression
                                  (shift_expression
                                    (additive_expression
                                      (multiplicative_expression
                                        (unary_expression
                                          (exponent_expression
                                            (postfix_expression
                                              (primary_expression
                                                (number_literal))))))))))))))))))))))))
  (implementation_definition
    (qualified_identifier
      (identifier))
    (type_union
      (type_arrow
        (type_suffix
          (type_prefix
            (type_atom
              (type_identifier
                (qualified_identifier
                  (identifier)))))
          (type_prefix
            (type_atom
              (type_identifier
                (qualified_identifier
                  (identifier))))))))
    (function_definition
      (identifier)
      (parameter_list
        (parameter
          (typed_pattern
            (pattern_base
              (identifier))
            (type_union
              (type_arrow
                (type_suffix
                  (type_prefix
                    (type_atom
                      (type_identifier)))))))))
      (return_type
        (type_union
          (type_arrow
            (type_suffix
              (type_prefix
                (type_atom
                  (type_identifier
                    (qualified_identifier
                      (identifier)))))))))
      (block
        (expression_statement
          (pipe_expression
            (matchable_expression
              (assignment_expression
                (range_expression
                  (logical_or_expression
                    (logical_and_expression
                      (bitwise_or_expression
                        (bitwise_xor_expression
                          (bitwise_and_expression
                            (equality_expression
                              (comparison_expression
                                (shift_expression
                                  (additive_expression
                                    (multiplicative_expression
                                      (unary_expression
                                        (exponent_expression
                                          (postfix_expression
                                            (primary_expression
                                              (string_literal)))))))))))))))))))))))
  (methods_definition
    (type_union
      (type_arrow
        (type_suffix
          (type_prefix
            (type_atom
              (type_identifier
                (qualified_identifier
                  (identifier)))))
          (type_prefix
            (type_atom
              (type_identifier
                (qualified_identifier
                  (identifier))))))))
    (function_definition
      (identifier)
      (parameter_list
        (parameter
          (typed_pattern
            (pattern_base
              (identifier))
            (type_union
              (type_arrow
                (type_suffix
                  (type_prefix
                    (type_atom
                      (type_identifier)))))))))
      (return_type
        (type_union
          (type_arrow
            (type_suffix
              (type_prefix
                (type_atom
                  (type_identifier
                    (qualified_identifier
                      (identifier)))))))))
      (block
        (expression_statement
          (pipe_expression
            (matchable_expression
              (assignment_expression
                (range_expression
                  (logical_or_expression
                    (logical_and_expression
                      (bitwise_or_expression
                        (bitwise_xor_expression
                          (bitwise_and_expression
                            (equality_expression
                              (comparison_expression
                                (shift_expression
                                  (additive_expression
                                    (multiplicative_expression
                                      (unary_expression
                                        (exponent_expression
                                          (postfix_expression
                                            (primary_expression
                                              (identifier))
                                            (member_access
                                              (identifier)))))
                                      (unary_expression
                                        (exponent_expression
                                          (postfix_expression
                                            (primary_expression
                                              (identifier))
                                            (member_access
                                              (identifier))))))
                                    (multiplicative_expression
                                      (unary_expression
                                        (exponent_expression
                                          (postfix_expression
                                            (primary_expression
                                              (identifier))
                                            (member_access
                                              (identifier)))))
                                      (unary_expression
                                        (exponent_expression
                                          (postfix_expression
                                            (primary_expression
                                              (identifier))
                                            (member_access
                                              (identifier))))))))))))))))))))))))
