=================
Type Expressions
=================

fn type_examples(arr: Array i32, pair: (i32, string), cb: (i32, string) -> ?Result bool) -> !Iterator string {
  nil
}
---

(source_file
  (function_definition
    (identifier)
    (parameter_list
      (parameter
        (typed_pattern
          (pattern_base
            (identifier))
          (type_union
            (type_arrow
              (type_suffix
                (type_prefix
                  (type_atom
                    (type_identifier
                      (qualified_identifier
                        (identifier)))))
                (type_prefix
                  (type_atom
                    (type_identifier
                      (qualified_identifier
                        (identifier))))))))))
      (parameter
        (typed_pattern
          (pattern_base
            (identifier))
          (type_union
            (type_arrow
              (type_suffix
                (type_prefix
                  (type_atom
                    (parenthesized_type
                      (type_union
                        (type_arrow
                          (type_suffix
                            (type_prefix
                              (type_atom
                                (type_identifier
                                  (qualified_identifier
                                    (identifier))))))))
                      (type_union
                        (type_arrow
                          (type_suffix
                            (type_prefix
                              (type_atom
                                (type_identifier
                                  (qualified_identifier
                                    (identifier))))))))))))))))
      (parameter
        (typed_pattern
          (pattern_base
            (identifier))
          (type_union
            (type_arrow
              (type_suffix
                (type_prefix
                  (type_atom
                    (parenthesized_type
                      (type_union
                        (type_arrow
                          (type_suffix
                            (type_prefix
                              (type_atom
                                (type_identifier
                                  (qualified_identifier
                                    (identifier))))))))
                      (type_union
                        (type_arrow
                          (type_suffix
                            (type_prefix
                              (type_atom
                                (type_identifier
                                  (qualified_identifier
                                    (identifier))))))))))))
              (type_arrow
                (type_suffix
                  (type_prefix
                    (type_prefix
                      (type_atom
                        (type_identifier
                          (qualified_identifier
                            (identifier))))))
                  (type_prefix
                    (type_atom
                      (type_identifier
                        (qualified_identifier
                          (identifier))))))))))))
    (return_type
      (type_union
        (type_arrow
          (type_suffix
            (type_prefix
              (type_prefix
                (type_atom
                  (type_identifier
                    (qualified_identifier
                      (identifier))))))
            (type_prefix
              (type_atom
                (type_identifier
                  (qualified_identifier
                    (identifier)))))))))
    (block
      (expression_statement
        (pipe_expression
          (matchable_expression
            (assignment_expression
              (range_expression
                (logical_or_expression
                  (logical_and_expression
                    (bitwise_or_expression
                      (bitwise_xor_expression
                        (bitwise_and_expression
                          (equality_expression
                            (comparison_expression
                              (shift_expression
                                (additive_expression
                                  (multiplicative_expression
                                    (unary_expression
                                      (exponent_expression
                                        (postfix_expression
                                          (primary_expression
                                            (nil_literal)))))))))))))))))))))))

=======================
Where Clause Type Constraints
=======================

fn generic_where<T, U>(value: T, other: U) -> bool where T: Display + Clone, U: Display {
  true
}

---

(source_file
  (function_definition
    (identifier)
    (type_parameter_list
      (type_parameter
        (identifier))
      (type_parameter
        (identifier)))
    (parameter_list
      (parameter
        (typed_pattern
          (pattern_base
            (identifier))
          (type_union
            (type_arrow
              (type_suffix
                (type_prefix
                  (type_atom
                    (type_identifier
                      (qualified_identifier
                        (identifier))))))))))
      (parameter
        (typed_pattern
          (pattern_base
            (identifier))
          (type_union
            (type_arrow
              (type_suffix
                (type_prefix
                  (type_atom
                    (type_identifier
                      (qualified_identifier
                        (identifier)))))))))))
    (return_type
      (type_union
        (type_arrow
          (type_suffix
            (type_prefix
              (type_atom
                (type_identifier
                  (qualified_identifier
                    (identifier)))))))))
    (where_clause
      (where_constraint
        (identifier)
        (type_bound_list
          (type_union
            (type_arrow
              (type_suffix
                (type_prefix
                  (type_atom
                    (type_identifier
                      (qualified_identifier
                        (identifier))))))))
          (type_union
            (type_arrow
              (type_suffix
                (type_prefix
                  (type_atom
                    (type_identifier
                      (qualified_identifier
                        (identifier))))))))))
      (where_constraint
        (identifier)
        (type_bound_list
          (type_union
            (type_arrow
              (type_suffix
                (type_prefix
                  (type_atom
                    (type_identifier
                      (qualified_identifier
                        (identifier)))))))))))
    (block
      (expression_statement
        (pipe_expression
          (matchable_expression
            (assignment_expression
              (range_expression
                (logical_or_expression
                  (logical_and_expression
                    (bitwise_or_expression
                      (bitwise_xor_expression
                        (bitwise_and_expression
                          (equality_expression
                            (comparison_expression
                              (shift_expression
                                (additive_expression
                                  (multiplicative_expression
                                    (unary_expression
                                      (exponent_expression
                                        (postfix_expression
                                          (primary_expression
                                            (boolean_literal)))))))))))))))))))))))
