interface Enumerable T for E {
  fn each(E, T -> Unit) -> Unit
}
impl Enumerable T for Array T {
  fn each(array: Array T, f: T -> Unit) -> Unit { ... }
}
impl Enumerable Int for Range Int {
  fn each(r: Range Int, f: Int -> Unit) -> Unit { ... }
}
impl Enumerable Float for Range Int {
  fn each(r: Range Int, f: Int -> Unit) -> Unit { ... }
}
impl Enumerable T for I : Iterator T {
  fn each(it: I, visit: T -> Unit) = while it.has_next? { visit(it.next) }
  fn iterator(it: I) -> Iterator T = it
}
impl Enumerable T for Iterator T {
  fn each(it: Iterator T, visit: T -> Unit) = while it.hasNext? { visit(it.next) }
  fn iterator(it: Iterator T) -> Iterator T = it
}
impl Enumerable (K,V) for Map K V
  fn each(map: Map K V, f: ( (K,V) ) -> Unit) -> Unit {
    map.keys().each { k => f( (k, map[k]) ) }
  }
}


interface Iterator T for I {
  fn has_next?(I) -> Bool
  fn next(I) -> Option T
}


interface Mappable A for M A {
  fn map(m: M A, convert: A -> B) -> M B
}
KeyMapper = impl Mappable K for Map K V
  fn map(m: Map K V, convert: K -> K2) -> Map K2 V { ... 2
  }
}
ValueMapper = impl Mappable V for Map K V {
  fn map(m: Map K V, convert: V -> W) -> Map K W { ... }
}
impl Mappable Int T for Int {
  fn map(m: Int, convert: Int -> T) -> T { ... }
}