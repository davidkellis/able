///////////////////////////////////////////////////////////////////////////////
// Conditional constructs

if <expr> { ... }
<expr> ? <expr> : <expr>
<expr> unless <expr>

// boolean operators
<expr> && <expr>
<expr> || <expr>
!<expr>


interface ActsAsBoolean for T {
  fn true?(T) -> Boolean
}

impl ActsAsBoolean for Boolean {
  fn true?(v: Boolean) => v
}

impl ActsAsBoolean for Nil {
  fn true?(v: Nil) => false
}

// U is a union type that is a superset of the single-member union type Nil
impl [U supersetOf Nil] ActsAsBoolean for U {
  fn true?(v: U) => v match {
    case Nil => false
    case _ => true
  }
}

impl ActsAsBoolean for T {
  fn true?(v: Nil) => true
}

fn ||[A: ActsAsBoolean, B: ActsAsBoolean](a: A, b: B): A | B => true?(a) ? a : b
fn &&[A: ActsAsBoolean, B: ActsAsBoolean](a: A, b: B): A | B => true?(a) ? a : b
fn !(a: ActsAsBoolean): Boolean => !a.true?


///////////////////////////////////////////////////////////////////////////////
// variable binding

<var>: <type> = <expr>
(<var>, <var>) = <expr>
MyStruct(<var>, <var>) = <expr>
(fn(<var>, <var>, <var>: Int) -> Int)(<value>, <value>, <value>)

// maybe this should be called Bindable, so it will work with variable assignment, parameter binding, pattern matching binding,
interface Assignable LHS for RHS {
  fn convert(rightHandSideValue: RHS) -> LHS
}

impl [T] Assignable T for T {
  fn convert(rightHandSideValue: T) -> T => rightHandSideValue
}

impl Assignable String for Int {
  fn convert(rhs: Int) -> String = rhs.toString
}

str: String = 123


///////////////////////////////////////////////////////////////////////////////
// for loop

for <variable> in <Iterator> {
  ...
}

interface Iterator T for I {
  fn hasNext?(I) -> Boolean
  fn next(I) -> Option T
}

impl Iterator T for Array T {
  fn hasNext?(I) -> Boolean { ... }
  fn next(I) -> Option T { ... }
}

for i in Array(1,2,3) { ... }


///////////////////////////////////////////////////////////////////////////////
// Range syntax

<expr>..<expr>    // inclusive range
<expr>...<expr>   // exclusive range

interface Range S E Out {
  fn inclusiveRange(start: S, end: E) -> Enumerable Out
  fn exclusiveRange(start: S, end: E) -> Enumerable Out
}

impl Range Int Int Int {
  fn inclusiveRange(start: Int, end: Int) -> Enumerable Int {
    buildIterator {
      i = start
      while i <= end {
        yield(i)
        i += 1
      }
    }
  }

  fn exclusiveRange(start: Int, end: Int) -> Enumerable Out {
    buildIterator {
      i = start
      while i < end {
        yield(i)
        i += 1
      }
    }
  }
}

impl Range Float Float Int {
  fn inclusiveRange(start: Float, end: Float) -> Enumerable Int => start.ceil..end.floor
  fn exclusiveRange(start: Float, end: Float) -> Enumerable Int => start.ceil...end.floor
}

4.5..9.9 |> toArray   // Array(5, 6, 7, 8, 9)


///////////////////////////////////////////////////////////////////////////////
// function application

<func>()
<func>(<arg>, <arg>)
<val>.<func>()
<val>.<func>()

If an expression is suffixed by parenthesis, then the expression is treated as a function call. The compiler examines
the type of the expression and searches the current scope for a function definition that matches

fn apply(i, j: Int) -> Int => i * j
fn apply(i: Int, j: Float) -> Float => i * j
fn apply(i: Float, j: Int) -> Float => i * j

5(6)    // returns 30
5(6.0)  // returns 30.0
5.0(6)  // returns 30.0


fn apply[T](a: Array T, i: Int) -> Option T => a.get(i)

a = Array(10, 20, 30)
a(0)    // returns Some(10)
a(1)    // returns Some(20)
a(5)    // returns None


///////////////////////////////////////////////////////////////////////////////
// extractor functions

struct Person { name: String, age: Int }

// provided by default by struct definition
fn unapply(p: Person) -> (String, Int) => (p.name, p.age)

fn unapply(p: Person) -> (String, Int, Int) => (p.name, p.age, rand().to_int)