package able.collections.linked_list

struct List T {
  first: Node T | Nil,
  last: Node T | Nil
}
// creates fn List(first: Node T | Nil, last: Node T | Nil) -> List T

struct Node T {
  prev: Node T | Nil,
  next: Node T | Nil,
  data: T
}

fn List[T]() -> List T {
  List T {
    first = nil
    last = nil
  }
  // or equivalently, List T {}
}

fn List(values: T*) -> List T {
  list = List(nil, nil)
  values.each(list.append)
  list
}

fn append(list: List T, value: T) -> Node T {
  old_last = list.last
  new_last = Node(old_last, nil, value)
  list.last = new_last
  if !old_last {
    list.first = new_last
  }
  new_last
}

fn prepend(list: List T, value: T) -> Node T {
  old_first = list.first
  new_first = Node(nil, old_first, value)
  list.first = new_first
  if !old_first {
    list.last = new_first
  }
  new_first
}

fn find_node(list: List T, value: T) -> Nil | Node T => list.find(_.data == value).get_or_else(nil)

fn remove(list: List T, value: T) -> Nil | Node T {
  node = list.find_node(value)
  list.remove_node(node) if node
  node
}

fn remove_node(list: List T, node: Node T {prev, next}) -> Unit {
  (prev, next) match {
    case (prev: Node T, next: Node T) => {   // interior node
      next.prev = prev
      prev.next = next
    }
    case (nil, next: Node T) => {            // first node
      list.first = next
      next.prev = nil
    }
    case (prev: Node T, nil) => {            // last node
      list.last = prev
      prev.next = nil
    }
  }
}

fn clear(list: List T) -> List T {
  list.first = nil
  list.last = nil
  list
}


////////////////////////////////// Interface implementations //////////////////////////////////

ListValues = impl Iterable T for List T {
  fn each(list: List T, f: T -> Unit) -> Unit {
    node = list.first
    while node != nil {
      f(node.data)
      node = node.next
    }
  }
}

ListNodes = impl Iterable Node.T for List T {
  fn each(list: List T, f: T -> Unit) -> Unit {
    node = list.first
    while node != nil {
      f(node)
      node = node.next
    }
  }
}
