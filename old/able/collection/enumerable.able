package able.collections

interface Enumerable[T] for U {
  fn each(U, T -> Unit) -> Unit
  fn iterator(enumerable: U) -> Iterator[T] = buildIterator { enumerable.each(yield) }

  fn reduce[V](enumerable: U, initial: V, accumulate: (V, T) -> V) -> V {
    accumulator = initial
    enumerable.each { t => accumulator = accumulate(accumulator, t) }
    accumulator
  }

  fn all?(enumerable: U, predicate: T -> Boolean) -> Boolean {
    breakpoint :stop {
      enumerable.each { t => break :stop, false unless predicate(t) }
      true
    }
  }

  fn any?(enum: U, predicate: T -> Boolean) -> Boolean {
    breakpoint :stop {
      enum.each { t => break :stop, true if predicate(t) }
      false
    }
  }

  # chunk
  # chunkWhile

  fn count(enum: U) -> Int = enum.reduce(0, +)

  fn count(enum: U, predicate: T -> Boolean) -> Int = enum.reduce(0) { sum, t => predicate(t) ? sum + 1 : sum }
}

# The interpretation of an interface definition of the form:
# interface Foo for A {
#   fn bar[B](A) -> A
# }
# is
# Foo is an interface considered to be implemented by an underlying type, A, if there is a function
# named bar whose first parameter is a value of type A and returns a value of type A. A may either be a type constructor
# or a concrete type.
#
# A client may invoke the bar function using *either* (1) a value of type Foo, or (2) a value of type A, as the first
# argument to bar.
#
#
# The interpretation of an interface definition of the form:
# interface Foo[T] for A[B] {
#   fn bar(A[B]) -> A[T]
# }
# is
# Foo[T] is an interface considered to be implemented by an underlying type, A[B], where A is a type constructor
# parameterized by *at least* one type parameter, B, if there is a function named bar whose first parameter is a value
# of type A[B] and returns a value of type A[T].
#
# Furthermore, whatever positional index that type parameter B is supplied to type constructor A in the first parameter
# of function bar *must* match the positional index that type parameter T is supplied to type constructor A in the return
# value of function bar.
#
# A client may invoke the bar function using *either* (1) a value of type Foo[T], or (2) a value of type A[B], as the
# first argument to bar.

########################################################################################################################

package able.collections

interface Enumerable T for E {
  fn each(E, T -> Unit) -> Unit
  fn iterator(enum: E) -> Iterator T = buildIterator { enum.each(yield) }

  fn reduce[V](enum: E, initial: V, accumulate: (V, T) -> V) -> V {
    accumulator = initial
    enumerable.each { t => accumulator = accumulate(accumulator, t) }
    accumulator
  }

  fn all?(enumerable: E, predicate: T -> Boolean) -> Boolean {
    breakpoint :stop {
      enumerable.each { t => break :stop, false unless predicate(t) }
      true
    }
  }

  fn any?(enum: E, predicate: T -> Boolean) -> Boolean {
    breakpoint :stop {
      enum.each { t => break :stop, true if predicate(t) }
      false
    }
  }

  # chunk
  # chunkWhile

  fn count(enum: E) -> Int = enum.reduce(0, +)

  fn count(enum: E, predicate: T -> Boolean) -> Int = enum.reduce(0) { sum, t => predicate(t) ? sum + 1 : sum }
}

impl Enumerable T for Array T {
  fn each(array: Array T, f: T -> Unit) -> Unit {
    i = 0
    length = array.length()
    while i < length {
      f(array[i])
      i += 1
    }
  }
}

impl Enumerable Int for Range Int {
  fn each(r, visit) {
    i = r.start
    op = r.inclusive? ? <= : <
    while i `op r.end {
      visit(i)
      i += 1
    }
  }
}

struct MaxTen(Int)
impl Enumerable Int for MaxTen {
  fn each(ten: MaxTen, visit: Int -> Unit) = (ten._0..10).each(visit) if ten._0 <= 10
}

########################################################################################################################

package able.collections

interface Enumerable E._ T {
  fn each(E T, T -> Unit) -> Unit
  fn iterator(enum: E T) -> Iterator T = buildIterator { enumerable.each(yield) }

  fn reduce[V](enum: E T, initial: V, accumulate: (V, T) -> V) -> V {
    accumulator = initial
    enumerable.each { t => accumulator = accumulate(accumulator, t) }
    accumulator
  }

  fn all?(enumerable: E T, predicate: T -> Boolean) -> Boolean {
    breakpoint :stop {
      enumerable.each { t => break :stop, false unless predicate(t) }
      true
    }
  }

  fn any?(enum: E T, predicate: T -> Boolean) -> Boolean {
    breakpoint :stop {
      enum.each { t => break :stop, true if predicate(t) }
      false
    }
  }

  # chunk
  # chunkWhile

  fn count(enum: E T) -> Int = enum.reduce(0, +)

  fn count(enum: E T, predicate: T -> Boolean) -> Int = enum.reduce(0) { sum, t => predicate(t) ? sum + 1 : sum }
}

impl Enumerable Array.T T {
  fn each(array: Array T, f: T -> Unit) -> Unit {
    i = 0
    length = array.length()
    while(i < length) {
      f(array[i])
      i += 1
    }
  }
}

########################################################################################################################

package able.collections

interface Enumerable for Self, T {
  fn each(Self, T -> Unit) -> Unit
  fn iterator(enum: Self) -> Iterator = buildIterator { enumerable.each(yield) }

  fn reduce[V](enum: Self, initial: V, accumulate: (V, T) -> V) -> V {
    accumulator = initial
    enumerable.each { t => accumulator = accumulate(accumulator, t) }
    accumulator
  }

  fn all?(enumerable: Self, predicate: T -> Boolean) -> Boolean {
    breakpoint :stop {
      enumerable.each { t => break :stop, false unless predicate(t) }
      true
    }
  }

  fn any?(enum: Self, predicate: T -> Boolean) -> Boolean {
    breakpoint :stop {
      enum.each { t => break :stop, true if predicate(t) }
      false
    }
  }

  # chunk
  # chunkWhile

  fn count(enum: Self) -> Int = enum.reduce(0, +)

  fn count(enum: Self, predicate: T -> Boolean) -> Int = enum.reduce(0) { sum, t => predicate(t) ? sum + 1 : sum }
}

impl Enumerable for Array T, T {
  fn each(array: Array T, f: T -> Unit) -> Unit {
    i = 0
    length = array.length()
    while(i < length) {
      f(array[i])
      i += 1
    }
  }
}

impl Enumerable for Range Int, Int {
  fn each(r: Range Int, visit: Int -> Unit) {
    i = r.start
    op = r.inclusive? ? <= : <
    while i `op r.end {
      visit(i)
      i += 1
    }
  }
}

struct MaxTen(Int)
impl Enumerable for MaxTen, Int {
  fn each(ten: MaxTen, visit: Int -> Unit) = (ten._0..10).each(visit) if ten._0 <= 10
}
impl Enumerable for MaxTen, Float {
  fn each(ten: MaxTen, visit: Float -> Unit) = (ten._0..10).each(visit(_.toF)) if ten._0 <= 10
}