package able.collections

interface Monoid for U[A] {
  def empty() -> U[A]
  def append(U[a], A) -> U[A]
}

# maybe call this Mappable so that mere mortals don't have to google "what's a Functor" and then start reading "Learn you a Haskell"
interface Mappable[A] for U[A] {
  fn map[B](m: U[A], convert: A -> B) -> U[B]
}

impl Mappable for U[A] where U[A]: Monoid + Enumerable[A] {
  fn map[B](m: U[A], convert: A -> B) -> Enumerable[B] {
    b: U[A] = empty()
    m.each { a => b.add(convert(a)) }
    b
  }
}

# the interpretation of the Mappable interface definition is:
# Mappable is an interface type considered to be implemented by an underlying type, U (which is itself
# parameterized by type parameter A; this makes U a type constructor parameterized on type A) if there is a function
# named map defined such that:
# 1. the first argument's type is a type constructor parameterized by at least one type parameter
# 2. the return value's type is a type constructor parameterized by at least one type parameter
# 3. the type constructor in (1) takes A as one of its type parameters
# 4. the type constructor in (2) takes B as one of its type parameters
# 5. whatever positional index type parameter A is suppled to the type constructor in (1) must match the positional
#    index that type parameter B is supplied to the type constructor in (2)


# List[T] implements Mappable[T,U] {
#   fn map(list: List[T], convert: T -> U) -> List[U] {
#     lb = ListBuilder(0, list.length)  # length, capacity
#     list.each { element => convert(element) |> lb.add }
#     lb.toList
#   }
# }

########################################################################################################################

interface Mappable A for M _ {
  fn map(m: M A, convert: A -> B) -> M B
}

impl Mappable A for Array {
  fn map(arr: Array A, convert: A -> B) -> Array B {
    ab = ArrayBuilder(0, arr.length)  # length, capacity
    arr.each { element => convert(element) |> ab.add }
    ab.toArray
  }
}

impl Mappable A for List {
  fn map(list: List T, convert: T -> U) -> List U {
    lb = ListBuilder(0, list.length)  # length, capacity
    list.each { element => convert(element) |> lb.add }
    lb.toList
  }
}

impl Mappable A for Iterator {
  fn map(it: Iterator A, convert: A -> B) -> Iterator B = buildIterator { it.each(convert(_) |> yield) }
}

impl Mappable A for Enumerable {
  fn map(enum: Enumerable A, convert: A -> B) -> Enumerable B = buildIterator { it.each(convert(_) |> yield) }
}


interface Buildable A for B {
  fn empty(): B
  fn add(B, A) -> B
}

impl Buildable A for Array A {
  fn empty() -> Array A = Array[A]()
  fn add(as: Array A, a: A) -> Array A = as.append(a)
}

// this implements Mappable for any type constructor M such that, given free type parameters A and B,
// M A is Enumerable A and M B is Buildable B
impl [B] Mappable A for M _ if M A : Enumerable A, M B : Buildable B {
  fn map(m: M A, convert: A -> B) -> M B {
    b: M B = empty()
    m.each { a => b.add(a) }
  }
}

########################################################################################################################

// B and A are both concrete types, each of which may be parameterized, but ultimately represent concrete types
interface Buildable B A {
  fn empty(): B
  fn add(B, A) -> B
}

interface Mappable M._ {
  fn map[A, B](m: M A, convert: A -> B) -> M B
}

impl Mappable Array._ {
  fn map[A, B](arr: Array A, convert: A -> B) -> Array B {
    ab = ArrayBuilder(0, arr.length)  # length, capacity
    arr.each { element => convert(element) |> ab.add }
    ab.toArray
  }
}

impl Buildable Array.A A {
  fn empty() -> Array A = Array[A]()
  fn add(as: Array A, a: A) -> Array A = as.append(a)
  // fn add = append
}

// Given that A is a free type, Mappable is satisfied by type M if M and A satisfy the Buildable and Enumerable interfaces
impl Mappable M.A where Buildable M.B A + Enumerable M.A A {
  fn map(m: M A, convert: A -> B) -> M B {
    b: M B = empty()
    m.each { a => b.add(a) }
  }
}


########################################################################################################################
###### Here is my explanation of interfaces and implementations to John:
########################################################################################################################

I might've come up with a simpler approach than all the haskell hkt mess. It doesn't require knowledge of hkt magic, categories, kinds, etc. - just careful attention to the arity of type constructors, and the position that type parameters are supplied to type constructors.
Here's Mappable
interface Mappable[A,B] for U {
 fn map(f: U[A], convert: A -> B) -> U[B]
}
# the interpretation of the Mappable interface definition is:
# Mappable is an interface type, parameterized by types A and B, that is considered to be implemented by an underlying
# type, U, if there is a function named map defined such that:
# 1. the first argument's type is a type constructor parameterized by at least one type parameter
# 2. the return value's type is a type constructor parameterized by at least one type parameter
# 3. the type constructor in (1) takes A as one of its type parameters
# 4. the type constructor in (2) takes B as one of its type parameters
# 5. whatever positional index type parameter A is suppled to the type constructor in (1) must match the positional
#    index that type parameter B is supplied to the type constructor in (2)
J M Archer (archer884@gmail.com)
That seems simpler in that you don't have to learn any new concepts. But, man...
That has five steps.
Well, I spell it out for clarity, but I think it makes intuitive sense when you see an example
Array[T] implements Mappable[T,U] {
 fn map(arr: Array[T], convert: T -> U) -> Array[U] {
   ab = ArrayBuilder(0, arr.length)  # length, capacity
   arr.each { element => convert(element) |> ab.add }
   ab.toArray
 }
}
that one's "obvious" because Array is a type paramterized by only one type - T
J M Archer (archer884@gmail.com)
Ok, but wouldn't that work for ConfigItem(T) -> ConfigItem(U)?
Yes
List works the same way as Array:
List[T] implements Mappable[T,U] {
 fn map(list: List[T], convert: T -> U) -> List[U] {
   lb = ListBuilder(0, list.length)  # length, capacity
   list.each { element => convert(element) |> lb.add }
   lb.toList
 }
}
still "obvious" because List only has one type parameter
Map is where those rules make an impact
ValueMapper = Map[K,V] implements Mappable[V,] {
 fn map(m: Map[K,V], convert: V -> W) -> Map[K,W] {
   m2 = map.empty[K,W]()
   m.keys().each { k => convert(m[k]) |> m2.add(k, _) }
   m2
 }
}
oops, have a typo in that one
ValueMapper = Map[K,V] implements Mappable[V,W] {
 fn map(m: Map[K,V], convert: V -> W) -> Map[K,W] {
   m2 = map.empty[K,W]()
   m.keys().each { k => convert(m[k]) |> m2.add(k, _) }
   m2
 }
}
there
so that one lets you map over a Map structure, and it transforms the values of the map with the conversion function
here's a different implementation that transforms the keys with the conversion function
KeyMapper = Map[K,V] implements Mappable[K,K2] {
 fn map(m: Map[K,V], convert: K -> K2) -> Map[K2,V] {
   m2 = map.empty[K2,V]()
   m.keys().each { k => convert(k) |> m2.add(_, m[k]) }
   m2
 }
}
Rule 5 just means that, in the ValueMapper example, in the line that reads ` fn map(m: Map[K,V], convert: V -> W) -> Map[K,W] {`, the position of the V in Map[K,V] is the second type parameter, and the position of the W in Map[K,W] is the second type parameter, and since both are in the same position "second position" then their positions match, and so rule 5 is satisfied.
Matching on position makes a lot more sense to me, a mere mortal, than Haskell's "kinds"
J M Archer (archer884@gmail.com)
So do they need to have the same *number* of type parameters?
Yes.
J M Archer (archer884@gmail.com)
Yeah, I've got no interest in how Haskell does this.
Yes, the arity of the type constructors must match
but that's clarified by the fact that U is used in both places, and U is a type constructor
and the way you know it's a type constructor is that it's parameterized at all
if U weren't parameterized anywhere in the function declarations in the interface, then you could treat it as any type - parameterized or not.
And a good example of that is the Enumerable interface:
interface Enumerable[T] for U {
 fn each(U, (T) -> Unit) -> Unit
 fn iterator(enumerable: U) -> Iterator[T] = buildIterator { enumerable.each(yield) }
}
Map[K,V] implements Enumerable[(K,V)] {
 fn each(map: Map[K,V], f: ( (K,V) ) -> Unit) -> Unit {
   map.keys().each { k => f( (k, map[k]) ) }
 }
}
in the Enumerable interface definition, U isn't parameterized anywhere, so we can implement Enumerable for any type, whether parameterized or not.
J M Archer (archer884@gmail.com)
Yeah.
that's the gist of what I'm thinking
J M Archer (archer884@gmail.com)
Wait, so how does it know *which* parameterized type constructor you're s'posed to be using?
Or is that provided by the implementation?
that depends on the "base" type that is implementing the interface...
so in the `Array[T] implements Mappable[T,U]` example, Array is the base type, so Array is what U corresponds to
in the `KeyMapper = Map[K,V] implements Mappable[K,K2]` example, U corresponds to Map
in KeyMapper, since map is defined as `fn map(m: Map[K,V], convert: K -> K2) -> Map[K2,V]`, Map (which corresponds to U in the interface definition) is being parameterized by two type parameters - K, and V - in the first argument. In the return value, Map is being parameterized by two type parameters - K2, and V. And since the position of K corresponds to the position of K2, as expected by the definition of map in the interface definition, all the rules are satisfied.
J M Archer (archer884@gmail.com)
Well, ok then.
