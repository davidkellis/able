Able {
  sourceFile = ws? packageDecl eos packageLevelDecl eos? end

  // package foo
  // package internationalization
  packageDecl = "package" lws packageIdent

  // packageLevelDecl are any of the following:
  // import statements
  // variable declarations
  // assignment expressions
  // struct/union/function/interface/impl/macro definitions
  packageLevelDecl
    = importDecl
    | assignmentExpr
    | variableDecl
    | structDefn
    | unionDefn
    | functionDefn
    | interfaceDefn
    | implDefn
    | macroDefn

  // import io
  // import io.*
  // import io.{puts, gets}
  // import io.{puts as p}
  // import internationalization as i18n
  // import internationalization as i18n.{Unicode}
  // import davidkellis.matrix as mat.{Matrix, Vector as Vec}
  // import davidkellis.matrix as mat.{Matrix, Vector as Vec,}
  // import davidkellis.matrix as mat.{
  //   Matrix as Mat,
  //   Vector as Vec,
  // }
  importDecl
    = "import" lws fqPackageIdent (lws "as" lws packageIdent)? ".*"       -- allMembers
    | "import" lws fqPackageIdent (lws "as" lws packageIdent)?
        ".{" (ws? ident (lws "as" lws ident)? ws?)
             (listSep ws? ident (lws "as" lws ident)?)* listSep? ws? "}"  -- specificMembers
    | "import" lws fqPackageIdent (lws "as" lws packageIdent)?            -- basePackage


  // id: Int
  // id: CallStackLocal Int
  // id: CallStackLocal (Array Int)
  variableDecl
    = ident lws? ":" lws? typeName


  // id1
  // id1, id2
  identList
    = ident ( commaSep ident )*

  // id1
  // id1, id2
  fqIdentList
    = fqIdent ( commaSep fqIdent )*

  // id1
  // id1, id2
  localIdentList
    = ident ( commaSep ident )*

  // <expr> ; <expr>
  // <expr> <nl> <expr>
  // <expr>
  expressions
    = expression ( eos expression )*


  // struct Foo T [T: Iterable] { Int, Float, T }
  // struct Foo T { Int, Float, T, }
  // struct Foo T {
  //   Int,
  //   Float,
  //   T,
  // }
  // struct Foo T {
  //   Int
  //   Float
  //   T
  // }
  // struct Foo T [T: Iterable] { x: Int, y: Float, z: T }
  // struct Foo T { x: Int, y: Float, z: T, }
  // struct Foo T {
  //   x: Int,
  //   x: Float,
  //   y: T,
  // }
  // struct Foo T {
  //   x: Int
  //   y: Float
  //   z: T
  // }
  structDefn
    = "struct" lws inlineStructDefn

  inlineStructDefn
    = typeName (lws typeParametersDecl)? lws? "{" ws? commaDelimitedTypeNameList ws? "}"    --  commaDelimitedPositionalTypes
    | typeName (lws typeParametersDecl)? lws? "{" ws? newlineDelimitedTypeNameList ws? "}"  --  newlineDelimitedPositionalTypes
    | typeName (lws typeParametersDecl)? lws? "{" ws? commaDelimitedFieldList ws? "}"       --  commaDelimitedFieldList
    | typeName (lws typeParametersDecl)? lws? "{" ws? newlineDelimitedFieldList ws? "}"     --  newlineDelimitedFieldList

  typeParametersDecl
    =	"[" ws? freeTypeParameter (commaSep freeTypeParameter) ws? "]"

  // T : Foo
  // T _ : Mappable
  // T : Foo + Bar
  // T supersetOf X
  // T supersetOf X|Y|Z
  freeTypeParameter
    =	typeName (lws? typeConstraint)?

  // : Foo
  // : Foo & Bar
  // supersetOf X
  // supersetOf X|Y|Z
  typeConstraint
    = ":" lws? intersectionType         -- intersectionType
    | ":" lws? typeName                 -- interface
  //   | SUPERSET_OF lws typeIdent (lws? PIPE lws? typeIdent)*  # TypeConstraintSupersetOfConstraint

  // Buildable & Mappable
  intersectionType
    = typeName (ampSep typeName)+

  // T
  // Array T
  // Iterable T
  // Iterable _
  // Iterable.T
  // Iterable._
  // Foo A B C
  // Foo A (B C)
  // Foo A B.C
  // Foo A (B C D)
  // Foo A B.C.D
  typeName
    = spaceParameterizedType
    | dotParameterizedType
    | parenthesizedTypeName
    | typeIdent

  spaceParameterizedType = typeIdent (" " (dotParameterizedType | parenthesizedTypeName | freeTypeIdent))+
  dotParameterizedType = typeIdent ("." (parenthesizedTypeName | freeTypeIdent))+
  parenthesizedTypeName = "(" lws? typeName lws? ")"

  // Int, Float, T
  // Int, Float, T,
  //  Int,
  //  Float,
  //  T,
  commaDelimitedTypeNameList
    = typeName ( commaSep typeName )* (ws? ",")?

  /*
    Int
    Float
    T
  */
  newlineDelimitedTypeNameList
    = typeName ( nlSep typeName )* (ws? nl)?

  // x: Int, y: Float, z: T
  // x: Int, y: Float, z: T,
  //   x: Int,
  //   y: Float,
  //   z: T,
  commaDelimitedFieldList
    = typedIdent ( commaSep typedIdent )* (ws? ",")?

  /*
    x: Int
    y: Float
    z: T
  */
  newlineDelimitedFieldList
    = typedIdent ( nlSep typedIdent )* (ws? nl)?


  // id1: type1
  typedIdent
    =	ident lws? ":" lws? typeName

  // Union definition:
  // union String? = String | Nil
  // union House = SmallHouse { sqft: Float }
  //  | MediumHouse { sqft: Float }
  //  | LargeHouse { sqft: Float }
  // union Foo T [T: Blah] =
  //  | Bar A [A: Stringable] { a: A, t: T }
  //  | Baz B [B: Qux] { b: B, t: T }
  // union Option A = Some A {A} | None A {}
  // union Result A B = Success A {A} | Failure B {B}
  // union ContrivedResult A B [A: Fooable, B: Barable] = Success A X [X: Stringable] {A, X} | Failure B Y [Y: Serializable] {B, Y}
  unionDefn
    = "union" lws typeName (lws typeParametersDecl)? lws? "="
        ws? (nl ws? "|" ws?)? unionAlternative (pipeSep unionAlternative ws?)+

  unionAlternative
    = typeName | inlineStructDefn


  /*
  fn func1[<optional type paramter list>](<parameter list>) -> <optional return type>
  fn func2[<optional type paramter list>](<parameter list>) -> <optional return type>
  */
  functionDeclList = functionDecl ( nlSep functionDecl )*

  // fn <function name>[<optional type paramter list>](<parameter list>) -> <optional return type>
  functionDecl = "fn" lws ident (lws typeParametersDecl)? functionSignature

  /*
  fn func1[<optional type paramter list>](<parameter list>) -> <optional return type> => <expr>
  fn func2[<optional type paramter list>](<parameter list>) -> <optional return type> { <expr>; <expr>; ... }
  */
  functionDefnList = functionDefn ( nlSep functionDefn )*

  // fn <function name>[<optional type paramter list>] = <function object OR partial application expression OR placeholder lambda expression>
  // fn <function name>[<optional type paramter list>](<parameter list>) -> <optional return type> { <function body> }
  // fn <function name>[<optional type paramter list>](<parameter list>) -> <optional return type> => <function body>
  functionDefn
    = functionDefnFull
    | functionDefnAlias

  functionDefnFull
    = "fn" lws ident (lws typeParametersDecl)? functionSignature ws? functionBody

  functionDefnAlias
    = "fn" lws ident (lws typeParametersDecl)? ws? "=>" ws? functionAliasExpression

  // fn[<optional type paramter list>](<parameter list>) -> <optional return type> { <function body> }
  // fn[<optional type paramter list>](<parameter list>) -> <optional return type> => <function body>
  // (<parameter list>) -> <optional return type> { <function body> }
  // (<parameter list>) -> <optional return type> => <function body>
  anonymousFunctionDefn
    = anonymousFunctionLongForm
    | anonymousFunctionShortForm
    | lambdaExpression

  anonymousFunctionLongForm
    = "fn" typeParametersDecl? functionSignature ws? functionBody

  anonymousFunctionShortForm
    = functionSignature ws? functionBody

  // { <paramter list> -> <return type> => expression }
  lambdaExpression
    = lambdaParamsAndReturn
    | lambdaParamsOnly
    | lambdaReturnOnly
    | lambdaExpressionsOnly

  lambdaParamsAndReturn
    = "{" ws? parameterList ws? "->" ws? typeName ws? "=>" ws? expressions ws? "}"

  lambdaParamsOnly
    = "{" ws? parameterList ws? "=>" ws? expressions ws? "}"

  lambdaReturnOnly
    = "{" ws? "->" ws? typeName ws? "=>" ws? expressions ws? "}"

  lambdaExpressionsOnly
    = "{" ws? expressions ws? "}"

  functionAliasExpression
    = anonymousFunctionDefn
    | ident
    // | partialApplicationExpr   // implicit through the use of missing arguments and placeholder identifiers/symbols
    // | placeholderLambdaExpr    // implicit through the use of placeholder identifiers/symbols

  functionSignature
    = functionSignatureParameterListAndReturnType
    | functionSignatureParameterList

  functionSignatureParameterListAndReturnType
    = "(" ws? parameterList ws? ")" ws? "->" ws? typeName
  functionSignatureParameterList
    = "(" ws? parameterList ws? ")"

  parameterList
    = fnParameter (commaSep fnParameter)*

  fnParameter
    = destructuringPatternWithIdent
    | destructuringPrimitive                              -- destructuringPatternOnly

  destructuringPatternWithIdent = ident lws? ":" lws? destructuringTypePrimitive

  destructuringTypePrimitive
    = destructuringTuple                                            -- tuple
    | destructuringTypePrimitive "::" destructuringTypePrimitive    -- tuplePair
    | destructuringSequence                                         -- sequence
    | destructuringStruct                                           -- struct
    | typeName                                                      -- typeName

  destructuringPrimitive
    = destructuringTuple                                            -- tuple
    | destructuringPrimitive "::" destructuringPrimitive            -- tuplePair
    | destructuringSequence                                         -- sequence
    | destructuringStruct                                           -- struct
    | ident                                                         -- identifier


  functionBody
    = block
    | functionBodySingleExpr

  functionBodySingleExpr = "=>" ws? expression

  // { expressions }
  // { expressions catch patternMatchAlternatives ensure expressions }
  block
    = "{" ws? expressions (ws "catch" ws patternMatchAlternatives (ws "ensure" ws expressions)? )? ws? "}"


// interface Foo T [T: Iterable] {
//   fn foo() -> i32
// }
interfaceDefn
  = 'interface' lws typeName (lws typeParametersDecl)? lws? "{" ws? functionDeclList? ws? "}"

// [implName =] impl [X, Y, Z, ...] A <B C ...> for D <E F ...> {
//   fn foo(T1, T2, ...) -> T3 { ... }
//   ...
// }
implDefn
  = namedImplDefn
  | anonymousImplDefn

namedImplDefn
  = ident lws? "=" lws? anonymousImplDefn

// impl [X, Y, Z, ...] A <B C ...> for D <E F ...> {
//   fn foo(T1, T2, ...) -> T3 { ... }
//   ...
// }
anonymousImplDefn
  = 'impl' (lws typeParametersDecl)? lws typeName lws "for" lws typeName lws? "{" ws? functionDefnList? ws? "}"

// macro <name of macro function>(<parameters>) {
//   <pre-template logic goes here>
//   `<template goes here>`
// }
macroDefn
  = 'macro' lws ident "(" ws? localIdentifierList ws? ")" ws? macroBlock

// { expressions }
// { expressions catch: patternMatchAlternatives ensure: expressions }
macroBlock
  = "{" ws? macroExpressions (ws "catch" ws patternMatchAlternatives (ws "ensure" ws expressions)? )? ws? "}"

// <expr> ; <expr>
// <expr>
macroExpressions
  = macroExpression ( eos macroExpression )*

macroExpression
  = macroTemplate
  | expression

macroTemplate
  = "`" ( ~"`" any )* "`"


// assuming h is of type House
// h match {
//   TinyHouse | SmallHouse => puts("build a small house")
//   m: MediumHouse => puts("build a modest house - $m")
//   LargeHouse{area} => puts ("build a large house of $area sq. ft.")
//   HugeHouse{poolCount=pools} => puts ("build a huge house with $poolCount pools!")
// }
// OR
// opt match { None => false | _ => true }
patternMatchAlternatives
  = caseClause ( (nlSep | pipeSep) caseClause)*

// TinyHouse | SmallHouse => puts("build a small house")
// m: MediumHouse => puts("build a modest house - $m")
// l: LargeHouse{area} => puts ("build a large house of $area sq. ft. - $l")
// HugeHouse{_, poolCount} => puts ("build a huge house with $poolCount pools!")
caseClause
  = patternWithOptionalIdentifier ws "=>" ws expression

patternWithOptionalIdentifier
  = patternWithIdent
  | pattern

patternWithIdent
  = ident lws? ":" lws? pattern

pattern
  = typeName
  | unionOfTypes
  | destructuringTuple
  | destructuringTuplePair
  | destructuringSequence
  | destructuringStruct
  | literal

// Array A | bool | String
unionOfTypes
  = typeName (pipeSep typeName)+

// (v1)
// (v1, v2)
// v1::v2
destructuringTuple
  = "(" ws? destructuringPrimitive (commaSep destructuringPrimitive)* ws? ")"

destructuringTuplePair
  = destructuringPrimitive "::" destructuringPrimitive

// Array[x]
// Array[_, x]
// Array[x, y, zs*]
// Array Int [x, y, zs*]
// List[1, x, 3]
destructuringSequence
  = destructuringSequenceWithSplatArgument
  | destructuringSequenceNoSplatArgument

destructuringSequenceNoSplatArgument
  = typeName "[" ws? destructuringPrimitive (commaSep destructuringPrimitive) ws? "]"

destructuringSequenceWithSplatArgument
  = typeName "[" ws? destructuringPrimitive (commaSep destructuringPrimitive) (commaSep ident "*") ws? "]"

// MyStruct{v1, v2}
// MyStruct{v1=name, v2=age}
// MyStruct Int {v1, v2}
destructuringStruct
  = destructuringStructWithPositionalFields
  | destructuringStructWithNamedFields

destructuringStructWithPositionalFields
  = typeName lws? "{" (ws? destructuringPrimitive WS? ",")*
                      (ws? destructuringPrimitive ws? ","?)? ws? "}"

destructuringStructWithNamedFields
  = typeName lws? "{" (ws? ident ws? "=" ws? destructuringPrimitive ws? ",")*
                      (ws? ident ws? "=" ws? destructuringPrimitive ws? ","?) ws? "}"

// references:
// - http://kotlinlang.org/docs/reference/grammar.html#expression
// - https://docs.julialang.org/en/release-0.4/manual/mathematical-operations/
//expression
//  = parenthesizedExpression                                             # - done
//  | fqIdent                                                             # - done
//  | placeholderIdent
//  | literal                                                             # - done
//  | importDecl
//  | functionDefn
//	| anonymousFunctionDefn
//  | doExpr                                                              # ExpressionDoExpr - done
//  | ifExpr                                                              # ExpressionIfExpr - done
//	| expression WS 'match' WS LBRACE WS? patternMatchAlternatives WS? RBRACE   # ExpressionMatchExpr
//  | whileExpr                                                           # ExpressionWhileExpr - done
//  | forExpr                                                             # ExpressionForExpr - done
//  | returnStatement                                                     # ExpressionReturnExpr - done
//  | 'break'                                                             # ExpressionBreakExpr - done
//  | 'continue'                                                          # ExpressionContinueExpr - done
//	| 'jumppoint' WS label WS LBRACE WS? expressions WS? RBRACE           # ExpressionJumpPointDefn - done
//	| 'jump' WS label WS expression                                       # ExpressionJumpExpr - done
//
//  | functionCall                                                        # ExpressionFunctionCall - done
//  | lhs=expression WS? op=(DOT | '&.') WS? rhs=expression               # ExpressionNavigation
//  | expression op='!!'                                                  # ExpressionUnaryPostfixExpr - done  // todo: may not be needed
//
//	| op=(PLUS | MINUS | BANG | '~') expression                           # ExpressionUnaryPrefixExpr - done
//  | expression WS AS WS typeName                                        # ExpressionAsExpr - done      // todo: may not be needed
//  | lhs=expression WS op=POW WS rhs=expression                          # ExpressionExponentiationExpr - done
//  | lhs=expression WS op=(STAR | DIVIDE | BACKSLASH | MOD) WS rhs=expression     # ExpressionMultiplicativeExpr - done
//  | lhs=expression WS op=(PLUS | MINUS) WS rhs=expression               # ExpressionAdditiveExpr - done
//	| lhs=expression '..' rhs=expression                                  # ExpressionInclusiveRange - done
//	| lhs=expression '...' rhs=expression                                 # ExpressionExclusiveRange - done
//  | lhs=expression WS op=(LT | GT | GTE | LTE) WS rhs=expression        # ExpressionComparison - done
//  | lhs=expression WS op=(EQ | NEQ) WS rhs=expression                   # ExpressionEqualityComparison - done
//  | lhs=expression WS AND WS rhs=expression                             # ExpressionConjunction - done
//  | lhs=expression WS OR WS rhs=expression                              # ExpressionDisjunction - done
//
//  | assignmentExpr                                                      # ExpressionAssignmentExpr - done
//  | variableDecl                                                        # ExpressionVariableDecl - done
//
//  | expression WS? IF condition=expression                              # ExpressionIfSuffixExpr - done
//  | expression WS? UNLESS condition=expression                          # ExpressionUnlessSuffixExpr - done
//  | expression WS? WHILE condition=expression                           # ExpressionWhileSuffixExpr - done

  expression
    = loopSuffixExpr

  loopSuffixExpr
    = conditionalSuffixExpr lws 'while' lws expression
    | conditionalSuffixExpr

  // a if b if c is treated as a if (b if c)
  conditionalSuffixExpr
    = assignmentExpr lws "if" lws expression
    | assignmentExpr lws "unless" lws expression
    | assignmentExpr

  // v = expr
  // v: type = expr
  // v1, v2 = expr, expr              # parallel assignment
  // v1: type, v2: type = expr, expr  # parallel assignment
  // (v1, v2) = expr
  // Array{v1, v2, v3*} = expr
  // MyStruct{v1, v2} = expr
  // v += expr
  // v -= expr
  // v *= expr
  // v: i32
  assignmentExpr
    = operatorAssignment
    | multipleAssignment
    | variableDecl
    | disjunction

  operatorAssignment
    = optionallyTypedIdent lws? infixAssignmentOperator lws? expression

  // id1
  // id1: type1
  optionallyTypedIdent
    = fqIdent (lws? ":" lws? typeName)?

  // Only operators that produce a value in the same domain as their arguments (i.e. operators whose domain and range are the same) should be allowed here.
  // It wouldn't make sense to allow =< or =>, because those would return bool, when the arguments would likely be numeric, and you couldn't assign a bool to a numeric type.
  infixAssignmentOperator
    = "=" ("+" | "-" | "*" | "/" | "\\" | "%" | "^" | "&&" | "||" | "&" | "|" | "<<" | ">>")

  multipleAssignment
    = multipleAssignmentLhs lws? "=" lws? expressionList

  multipleAssignmentLhs
    = assignmentLhs (commaSep assignmentLhs)

  assignmentLhs
    = patternWithIdent
    | destructuringPrimitive             -- patternOnly
    | indexAssignmentLhs

  patternWithIdent
    = ident lws? ":" lws? destructuringTypePrimitive

  indexAssignmentLhs
    = expression "(" ws? expression ws? ")"

  // <expr> , <expr>
  expressionList
    = expression ( commaSep expression )*


disjunction
  = disjunction ws? "||" ws? conjunction
  | conjunction

conjunction
  = conjunction ws? "&&" ws? equalityComparison
  | equalityComparison

equalityComparison
  = inequalityComparison ws? equalityOperator ws? inequalityComparison
  | inequalityComparison

equalityOperator = "==" | "!="

inequalityComparison
  = rangeExpression ws? inequalityOperator ws? rangeExpression
  | rangeExpression

inequalityOperator
  = "<=" | ">=" | "<" | ">"

rangeExpression
  = additiveExpression ws? "..." ws? rhs=additiveExpression    -- exclusiveRangeExpr
  | additiveExpression ws? ".." ws? rhs=additiveExpression     -- inclusiveRangeExpr
  | additiveExpression

additiveExpression
  = additiveExpression ws? additiveOperator ws? multiplicativeExpression
  | multiplicativeExpression

additiveOperator
  = "+" | "-"

multiplicativeExpression
  = multiplicativeExpression ws? multipicativeOperator ws? exponentiationExpression
  | exponentiationExpression

multipicativeOperator
  = "*" | "/%" | "/" | "\" | "%"     // multiply, divmod, int division, float division, modulus

exponentiationExpression
  = typeCastExpression "^" exponentiationExpression
  | typeCastExpression

// todo: this may not be needed
typeCastExpression
  = unaryPrefixExpression ws AS ws typeName
  | unaryPrefixExpression

unaryPrefixExpression
  = unaryPrefixOperator unaryPostfixExpression
  | unaryPostfixExpression

unaryPrefixOperator
  = "+" | "-" | "!" | "~"

unaryPostfixExpression
  = simpleExpression unaryPostfixOperator
  | simpleExpression functionCallSuffix               - functionCall
  | (unaryPostfixExpression ".")* simpleExpression    - navigationExpr
  | simpleExpression

unaryPostfixOperator
  = "!!"

functionCallSuffix
  = ("[" ws? typeList ws? "]" lws?)? "(" ws? argumentList? ws? ")"

typeList
  = typeName (commaSep typeName)

argumentList
  = expressionList

simpleExpression
  = parenthesizedExpression
  | ident
  | literal
  | doExpr
  | ifExpr
  | whileExpr
  | forExpr
  | returnExpr
  | breakExpr
  | continueExpr

parenthesizedExpression
  = "(" ws? expression ws? ")"

doExpr
  = 'do' ws? block

ifExpr
  = "if" lws expression ws? "{" ws? expressions ws? "}" ws? "else" ws? "{" ws? expressions ws? "}"
  | "if" lws expression ws? "{" ws? expressions ws? "}"

returnExpr
  = "return" expression?

breakExpr
  = "break"

continueExpr
  = "continue"

whileExpr
  = "while" ws expression ws "{" ws? expressions ws? "}"

forExpr
  = "for" ws forExprVariable ws "in" ws expression ws "{" ws? expressions ws? }

forExprVariable
  = forExprVariableDestructuringPatternWithIdent
  | destructuringPrimitive                         -- forExprVariableDestructuringPatternOnly

forExprVariableDestructuringPatternWithIdent
  = ident lws? ":" lws? destructuringTypePrimitive

jumpPoint
  = 'jumppoint' ws label ws block

// a label takes the form of a one-word Symbol in Ruby - e.g. :foo, :stop, :ThisLittlePiggyWentToMarket
label
  = ":" ident

jump
  = 'jump' ws label ws expression


literal
  = "()"                  -- unitLiteral
  | "nil"                 -- nilLiteral
  | boolLiteral
  | intLiteral
  | floatLiteral
  | stringLiteral

boolLiteral = "true" | "false"

// integer literals - similar to https://golang.org/ref/spec#Integer_literals
intLiteral
  = decimalLiteral intWidth?
  | binaryLiteral intWidth?
  | octalLiteral intWidth?
  | intWidth intWidth?

decimalLiteral
  = digit+ ('_' | digit)*

binaryLiteral
  = "0b" binaryDigit+ ('_' | binaryDigit)*

octalLiteral
  = '0o' octalDigit+ ('_' | octalDigit)*

hexLiteral
  = '0x' hexDigit+ ('_' | hexDigit)*

intWidth
  = 'i8' | 'i16' | 'i32' | 'i64' | 'u8' | 'u16' | 'u32' | 'u64'


// floating-point literals
floatLiteral
  = decimalLiteral "." decimalLiteral exponent? floatWidth?
  | decimalLiteral (exponent floatWidth | exponent | floatWidth)
  | "." decimalLiteral exponent? floatWidth?

exponent
  = ( "e" | "E" ) ( "+" | "-" )? decimalLiteral

floatWidth
  = "f32" | "f64"


// string literals - similar to https://golang.org/ref/spec#String_literals
stringLiteral
  = '"' (unicodeValue | unicodeNewLine | byteValue)* '"'
//  | '"""' (unicodeValue | unicodeNewLine | byteValue)* '"""'   // heredoc behaves like Ruby's <<~ heredoc

unicodeValue    = unicodeChar | littleUValue | bigUValue | escapedChar
byteValue       = octalByteValue | hexByteValue
octalByteValue  = "\\" octalDigit octalDigit octalDigit
hexByteValue    = "\\x" hexDigit hexDigit
littleUValue    = "\\u" hexDigit hexDigit hexDigit hexDigit
bigUValue       = "\\U" hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit
escapedChar     = "\\" ( "a" | "b" | "f" | "n" | "r" | "t" | "v" | "\\" | "'" | "\"" )

// Taken from https://golang.org/ref/spec#Characters

//newline = /* the Unicode code point U+000A */ .
unicodeNewLine = "\u000A"

// unicode_char   = /* an arbitrary Unicode code point except newline */ .
unicodeChar = ~unicodeNewLine any;

// taken from https://golang.org/ref/spec#Letters_and_digits
letter_ = letter | "_"

binaryDigit
  = "0" | "1"

octalDigit
  = "0".."7"

hexDigit
  = digit | "a".."f" | "A".."F"


  // identifiers
  packageIdent = letter_ (letter_ | digit)*
  fqPackageIdent (fully qualified package identifier) = packageIdent ("." packageIdent)*

  ident = letter_ (letter_ | digit)* "?"?
  fqIdent (fully qualified identifier) = ident ("." ident)*
  placeholderIdent = "_" digit*

  typeIdent = letter (letter_ | digit)* "?"?

  freeTypeIdent = letter_ ( letter_ | digit)*


  // misc productions

  eos (end of statement) = (semiSep | nlSep)+
  listSep (list separator) = (commaSep | nlSep)+
  semiSep = ws? ";" ws?
  commaSep = ws? "," ws?
  ampSep = ws? "&" ws?
  pipeSep = ws? "|" ws?


  // whitespace and comments

  //space := (ws | comment)+        // Override Ohm's built-in definition of space.

  nlSep (whitespace and comments, with at least one newline) = spaceWithNlOrComment+
  spaceWithNlOrComment
    = (lws | comment)? nl (lws | comment)? -- spaceWithNl

  ws (whitespace) = (lws | nl | comment)+

  inlineWhitespace
    = "\t"
    | "\x0B"    -- verticalTab
    | "\x0C"    -- formFeed
    | " "
    | "\u00A0"  -- noBreakSpace
    | "\uFEFF"  -- byteOrderMark
    | unicodeSpaceSeparator
  unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"
  lws (line whitespace) = inlineWhitespace+

  //lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
  eol = "\n" | "\r" ~"\n" | "\u2028" | "\u2029" | "\r\n"
  nl = eol+

  comment = multiLineComment | eolComment
  multiLineComment = "/*" (~"*/" any)* "*/"
  eolComment = ("//" | "#") (~nl any)*
}
