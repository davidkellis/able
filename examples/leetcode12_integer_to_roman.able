package main

## Given an integer, convert it to a roman numeral.
## Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M.
## Symbol       Value
## I             1
## V             5
## X             10
## L             50
## C             100
## D             500
## M             1000
## For example, 2 is written as II in Roman numeral, just two one's added together.
## 12 is written as XII, which is simply X + II.
## 27 is written as XXVII, which is XX + V + II.

fn int_to_roman(num: i32) -> String {
  ## Value-symbol pairs in descending order
  values := [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
  symbols := ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"]

  result := ""
  remaining := num
  i := 0

  while i < values.length {
    while remaining >= values[i] {
      result = result + symbols[i]
      remaining = remaining - values[i]
    }
    i = i + 1
  }

  result
}

fn main() -> void {
  ## Test cases
  test_cases := [
    (3, "III"),
    (4, "IV"),
    (9, "IX"),
    (58, "LVIII"),
    (1994, "MCMXCIV"),
    (1, "I"),
    (3999, "MMMCMXCIX"),
    (10, "X"),
    (40, "XL"),
    (90, "XC"),
    (400, "CD"),
    (900, "CM")
  ]

  i := 0
  while i < test_cases.length {
    input := test_cases[i].0
    expected := test_cases[i].1
    result := int_to_roman(input)

    print(`Test case ${i + 1}:`)
    print(`Input: ${input}`)
    print(`Expected: ${expected}, Got: ${result}`)
    if result == expected {
      print("✓ PASSED")
    } else {
      print("✗ FAILED")
    }
    print("")

    i = i + 1
  }
}
