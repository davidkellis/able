package main

## You are given an array height where height[i] is the height of a vertical line.
## Find two lines that together with the x-axis form a container, such that the container contains the most water.

fn max_area(height: Array i32) -> i32 {
  left := 0
  right := height.length - 1
  max_water := 0
  
  while left < right {
    ## Calculate current area
    width := right - left
    current_height := if height[left] < height[right] { height[left] } else { height[right] }
    current_area := width * current_height
    
    if current_area > max_water {
      max_water = current_area
    }
    
    ## Move the pointer pointing to the shorter line
    if height[left] < height[right] {
      left = left + 1
    } else {
      right = right - 1
    }
  }
  
  max_water
}

fn main() -> void {
  test_cases := [
    ([1, 8, 6, 2, 5, 4, 8, 3, 7], 49),
    ([1, 1], 1),
    ([4, 3, 2, 1, 4], 16),
    ([1, 2, 1], 2),
    ([1, 2, 4, 3], 4),
    ([1], 0),
    ([], 0),
    ([2, 3, 4, 5, 18, 17, 6], 17),
    ([1, 3, 2, 5, 25, 24, 5], 24)
  ]
  
  i := 0
  while i < test_cases.length {
    input := test_cases[i].0
    expected := test_cases[i].1
    result := max_area(input)
    
    print(`Test case ${i + 1}:`)
    print(`Input: [${input}]`)
    print(`Expected: ${expected}, Got: ${result}`)
    if result == expected {
      print("✓ PASSED")
    } else {
      print("✗ FAILED")
    }
    print("")
    
    i = i + 1
  }
}