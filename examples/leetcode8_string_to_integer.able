package main

## Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.

fn my_atoi(s: string) -> i32 {
  i := 0
  n := s.length
  
  ## Skip leading whitespace
  while i < n and s[i] == ' ' {
    i = i + 1
  }
  
  if i >= n {
    return 0
  }
  
  ## Check sign
  sign := 1
  if s[i] == '+' or s[i] == '-' {
    if s[i] == '-' {
      sign = -1
    }
    i = i + 1
  }
  
  ## Convert digits
  result := 0
  while i < n and s[i] >= '0' and s[i] <= '9' {
    digit := (s[i] - '0') as i32
    
    ## Check for overflow before multiplying
    if result > 214748364 or (result == 214748364 and digit > 7) {
      return if sign == 1 { 2147483647 } else { -2147483648 }
    }
    
    result = result * 10 + digit
    i = i + 1
  }
  
  sign * result
}

fn main() -> void {
  test_cases := [
    ("42", 42),
    ("   -42", -42),
    ("4193 with words", 4193),
    ("words and 987", 0),
    ("-91283472332", -2147483648),  ## Overflow
    ("91283472332", 2147483647),     ## Overflow
    ("", 0),
    ("+", 0),
    ("-   123", 0),
    ("3.14159", 3),
    ("+-12", 0),
    ("00000-42a1234", 0),
    ("   00000123", 123)
  ]
  
  i := 0
  while i < test_cases.length {
    input := test_cases[i].0
    expected := test_cases[i].1
    result := my_atoi(input)
    
    print(`Test case ${i + 1}:`)
    print(`Input: "${input}"`)
    print(`Expected: ${expected}, Got: ${result}`)
    if result == expected {
      print("✓ PASSED")
    } else {
      print("✗ FAILED")
    }
    print("")
    
    i = i + 1
  }
}