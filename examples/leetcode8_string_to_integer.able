package leetcode8

fn parse(chars: Array char) -> i32 {
  i := 0
  length := chars.size()

  while i < length and chars[i] == ' ' {
    i = i + 1
  }

  sign := 1
  if i < length and chars[i] == '-' {
    sign = -1
    i = i + 1
  } else if i < length and chars[i] == '+' {
    i = i + 1
  }

  value := 0
  while i < length {
    digit := digit_value(chars[i])
    if digit == -1 {
      break
    }

    value = value * 10 + digit

    if sign == 1 and value > 2147483647 {
      return 2147483647
    }
    if sign == -1 and value > 2147483648 {
      return -2147483648
    }

    i = i + 1
  }

  sign * value
}

fn digit_value(ch: char) -> i32 {
  if ch == '0' { return 0 }
  if ch == '1' { return 1 }
  if ch == '2' { return 2 }
  if ch == '3' { return 3 }
  if ch == '4' { return 4 }
  if ch == '5' { return 5 }
  if ch == '6' { return 6 }
  if ch == '7' { return 7 }
  if ch == '8' { return 8 }
  if ch == '9' { return 9 }
  -1
}

fn show_parse(chars: Array char) -> void {
  print(`Input: ${chars} -> ${parse(chars)}`)
}

fn main() -> void {
  show_parse(['4','2'])
  show_parse([' ',' ','-','4','2'])
  show_parse(['4','1','9','3',' ','w'])
  show_parse(['9','9','9','9','9','9'])
}
